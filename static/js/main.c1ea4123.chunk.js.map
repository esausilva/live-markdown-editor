{"version":3,"sources":["utils/GoogleAnalytics.js","utils/DownloadMarkdownFile.js","components/Editor.js","utils/helpers.js","components/MarkedOutput.js","components/App.js","index.js"],"names":["node","document","createElement","textnode","createTextNode","appendChild","head","window","func","oldOnLoad","onload","checkWindowOnload","mdArea","querySelector","mdFile","makeMdFile","code","blob","Blob","type","URL","revokeObjectURL","createObjectURL","addEventListener","e","ctrlKey","keyCode","preventDefault","stopPropagation","textContent","link","event","MouseEvent","setAttribute","dispatchEvent","Editor","handleInputFile","input","_this","refFileInput","file","files","fileName","name","split","fileExtension","length","isExtMatch","some","ext","match","RegExp","concat","matchMarkdown","reader","FileReader","editor","setValue","result","readAsText","value","defaultValue","alert","handleChange","props","getValue","handleEmptyEditor","shiftKey","this","codemirror","fromTextArea","refEditor","forceTextArea","mode","lineNumbers","matchBrackets","lineWrapping","tabSize","on","_this2","react_default","a","ref","textarea","id","onChange","htmlFor","xmlns","width","height","viewBox","d","Component","MarkedOutput","emojify","run","getElementById","marked","setOptions","highlight","hljs","highlightAuto","emojis","prevProps","prevState","dangerouslySetInnerHTML","__html","App","state","setState","className","href","components_Editor","components_MarkedOutput","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.c1ea4123.chunk.js","sourcesContent":["(function () {\n  const node = document.createElement('script');\n  const textnode = document.createTextNode(`(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n      ga('create', 'UA-16236406-4', 'auto');\n      ga('send', 'pageview');`);\n  node.appendChild(textnode);\n  document.head.appendChild(node);\n})();\n","(function(window) {\n  // Will check if there is already a function hooked to the window.onload event and will run that before this function\n  function checkWindowOnload(func) {\n    var oldOnLoad = window.onload;\n\n    if (typeof window.onload !== 'function') {\n      window.onload = func\n    } else { \n      window.onload = function () {\n        oldOnLoad();\n        func();\n      }\n    }\n  }\n\n  checkWindowOnload(function() {\n    const mdArea = document.querySelector('textarea');\n    let mdFile = null;\n\n    const makeMdFile = function(code) {\n      const blob = new Blob([code], {type: 'text/plain'});\n\n      // If we are replacing a previously generated file we need to\n      // manually revoke the object URL to avoid memory leaks.\n      if (mdFile !== null) {\n        window.URL.revokeObjectURL(mdFile);\n      }\n\n      mdFile = window.URL.createObjectURL(blob);\n\n      return mdFile;\n    }\n\n    function handleDownloadMdFile (e) {\n      //e.keyCode === 77 is 'm'\n      if (e.ctrlKey && e.keyCode === 77) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const blob = makeMdFile(mdArea.textContent);\n        const link = document.createElement('a');\n        const event = new MouseEvent('click');\n        \n        link.setAttribute('href', blob);\n        link.setAttribute('download', 'README.md');\n        link.dispatchEvent(event);\n      }\n    }\n\n    window.addEventListener('keyup', handleDownloadMdFile);\n  });\n})(window);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport codemirror from 'codemirror';\nimport 'codemirror/mode/gfm/gfm';\n\nimport { matchMarkdown } from '../utils/helpers';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/base16-light.css';\n\nclass Editor extends Component {\n  static propTypes = {\n    textarea: PropTypes.string\n  };\n\n  componentDidMount() {\n    // code mirror setup\n    this.editor = codemirror.fromTextArea(this.refEditor, {\n      forceTextArea: true,\n      mode: 'gfm',\n      lineNumbers: true,\n      matchBrackets: true,\n      lineWrapping: true,\n      tabSize: 2\n    });\n    this.editor.on('change', this.handleChange);\n\n    // empty editor\n    window.addEventListener('keyup', this.handleEmptyEditor);\n  }\n\n  handleInputFile = () => {\n    const input = this.refFileInput;\n    const file = input.files[0];\n    const isMarkdown = matchMarkdown(file);\n\n    if (isMarkdown) {\n      const reader = new FileReader();\n      reader.onload = () => this.editor.setValue(reader.result);\n      reader.readAsText(file);\n\n      input.value = input.defaultValue;\n    } else {\n      alert('Invalid file type.\\nOnly markdown files.');\n      this.refFileInput.value = this.refFileInput.defaultValue;\n    }\n  };\n\n  handleChange = () => {\n    this.props.handleChange(this.editor.getValue());\n  };\n\n  handleEmptyEditor = e => {\n    // keyCode 69 = e\n    if (e.ctrlKey && e.shiftKey && e.keyCode === 69) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this.editor.setValue('');\n    }\n  };\n\n  render() {\n    const editor = (\n      <textarea\n        ref={textarea => (this.refEditor = textarea)}\n        defaultValue={this.props.textarea}\n      />\n    );\n\n    return (\n      <div>\n        <input\n          type=\"file\"\n          ref={input => (this.refFileInput = input)}\n          id=\"fileInput\"\n          onChange={this.handleInputFile}\n        />\n        <label htmlFor=\"fileInput\">\n          <figure>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"17\"\n              viewBox=\"0 0 20 17\"\n            >\n              <path d=\"M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z\" />\n            </svg>\n          </figure>\n        </label>\n        {editor}\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","export function InitialTextValue () {\n  return `# Live Markdown Editor\n\n> Responsive GitHub flavored markdown editor built with [React.js](https://facebook.github.io/react/)\n\nYou can use this editor to preview your markdown files before committing to GitHub.\n\nTake a look at this project's [repo](https://github.com/esausilva/live-markdown-editor).\n \n## Useful Info\n\n * Download the markdown file by pressing **Ctrl+m**\n * Empty editor window by pressing **Ctrl+Shift+e**\n * [Emojis](http://www.webpagefx.com/tools/emoji-cheat-sheet/) are cool :thumbsup: :poop: :sunny: :alien:\n * Drag and Drop a markdown file to editor\n * Click on this icon ![UploadMd](http://i.imgur.com/7kCSgpzt.jpg) on the bottom right corner to browse and open a markdown file\n\n### Code samples\n\nJavaScript\n\n\\`\\`\\`js\nfunction Person(firstname, lastname) {\n    this.firstname = firstname;\n    this.lastname = lastname;\n}\n\\`\\`\\`\n\nCSS\n\n\\`\\`\\`css\nhtml { \n    height: 100%;\n    box-sizing: border-box;\n    font-size: 100%;\n}\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\\`\\`\\`\n\n### Tables\n\n| Tables   |      Are      |  Cool |\n|----------|:-------------:|------:|\n| col 1 is |  left-aligned | $1600 |\n| col 2 is |    centered   |   $12 |\n| col 3 is | right-aligned |    $1 |\n\n## Projects Used\n\n * [CodeMirror](https://codemirror.net/) - The code editor\n * [marked](https://github.com/chjj/marked) - The markdown parser\n * [highlight.js](https://highlightjs.org/) - The syntax highlighter in the markdown output\n * [emojify.js](http://hassankhan.me/emojify.js/) - Emoji support\n\n## License\n\nMIT © 2017 Esau Silva\n`;\n}\n\nexport function matchMarkdown (file) {\n    const textType = /markdown/;\n    // strange, in Windows 'file.type' yeilds empty string\n    // so going with file extension if 'file.type' is empty\n    const fileName = file.name.split('.');\n    const fileExtension = fileName[fileName.length-1];\n    const markdownExtensions = ['markdown','mdown','mkdn','mkd','md','mdwn','mdtxt','mdtext','text','Rmd'];\n    const isExtMatch = markdownExtensions.some(ext => ext.match(new RegExp(`^${fileExtension}$`,'i')));\n\n    if (file.type.match(textType) || isExtMatch) {\n        return true;\n    }\n\n    return false;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\nimport emojify from 'emojify.js';\nimport hljs from 'highlight.js';\n\nimport 'emojify.js/dist/css/basic/emojify.min.css';\nimport '../styles/hljs-github.css';\n\nclass MarkedOutput extends Component {\n  static propTypes = {\n    textarea: PropTypes.string\n  };\n\n  emojis() {\n    return emojify.run(document.getElementById('output'));\n  }\n\n  componentWillMount() {\n    // set up marked\n    marked.setOptions({\n      highlight: function(code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.emojis();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.emojis();\n  }\n\n  render() {\n    return (\n      <div\n        id=\"output\"\n        dangerouslySetInnerHTML={{ __html: marked(this.props.textarea) }}\n      />\n    );\n  }\n}\n\nexport default MarkedOutput;\n","import React, { Component } from 'react';\n\nimport Editor from './Editor';\nimport MarkedOutput from './MarkedOutput';\nimport { InitialTextValue } from '../utils/helpers';\n\nimport '../styles/ribbon.css';\nimport '../styles/App.css';\n\nclass App extends Component {\n  state = {\n    textarea: ''\n  };\n\n  componentWillMount() {\n    this.setState({ textarea: InitialTextValue() });\n  }\n\n  handleChange = textarea => {\n    this.setState({ textarea });\n  };\n\n  render() {\n    return (\n      <div id=\"container\">\n        <div className=\"ribbon right red\">\n          <a href=\"https://github.com/esausilva/live-markdown-editor\">\n            Fork me on GitHub\n          </a>\n        </div>\n        <Editor\n          textarea={this.state.textarea}\n          handleChange={this.handleChange}\n        />\n        <MarkedOutput textarea={this.state.textarea} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\nimport './utils/GoogleAnalytics'; // Remove after cloning\nimport './utils/DownloadMarkdownFile';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}